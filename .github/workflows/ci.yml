# .github/workflows/ci-cd.yml
name: CI / CD

on:
  pull_request:
  push:
    branches: [main]        # CI em pushes para main
    tags: ["v*.*.*"]        # CD quando tagar vX.Y.Z
  workflow_dispatch:

jobs:
# ------------------------------------------------------------------ #
# 1) LINT + TYPE-CHECK + TEST                                         #
# ------------------------------------------------------------------ #
  quality:
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install dev deps
        run: |
          python -m pip install -U pip
          python -m pip install ".[dev]"

      - name: Ruff – style / lint
        run: ruff check .

      - name: mypy – static typing
        run: mypy pix_client

      - name: Pytest + coverage
        run: pytest --cov=pix_client --cov-report=xml

      - name: Upload coverage (artefact opcional)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

# ------------------------------------------------------------------ #
# 2) BUILD DIST                                                       #
# ------------------------------------------------------------------ #
  build:
    needs: quality
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Build wheel + sdist
        run: |
          python -m pip install -U pip build twine
          python -m build
          twine check dist/*

      - name: Upload dist artefacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

# ------------------------------------------------------------------ #
# 3) PUBLISH – TEST PYPI                                              #
# ------------------------------------------------------------------ #
  release-testpypi:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist          # ← extrai diretamente para ./dist

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m pip install -U pip twine
          twine upload --repository testpypi dist/*

# ------------------------------------------------------------------ #
# 4) PUBLISH – PYPI                                                   #
# ------------------------------------------------------------------ #
  release-pypi:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: release-testpypi
    runs-on: ubuntu-latest
    environment: production        # opcional: pede aprovação manual
    permissions: read-all
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist              # ← idem

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install -U pip twine
          twine upload --repository testpypi --skip-existing dist/*

# ------------------------------------------------------------------ #
# 5) GITHUB RELEASE                                                   #
# ------------------------------------------------------------------ #
  github-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "pix_client ${{ github.ref_name }}"
          draft: false
          prerelease: false
          files: dist/*
